{"ast":null,"code":"import _extends from \"@babel/runtime/helpers/extends\";\nimport _objectWithoutProperties from \"@babel/runtime/helpers/objectWithoutProperties\";\nimport _defineProperty from \"@babel/runtime/helpers/defineProperty\";\nimport _classCallCheck from \"@babel/runtime/helpers/classCallCheck\";\nimport _createClass from \"@babel/runtime/helpers/createClass\";\nimport _possibleConstructorReturn from \"@babel/runtime/helpers/possibleConstructorReturn\";\nimport _getPrototypeOf from \"@babel/runtime/helpers/getPrototypeOf\";\nimport _inherits from \"@babel/runtime/helpers/inherits\";\nimport React from 'react';\nimport ReactDOM from 'react-dom';\nimport PropTypes from 'prop-types';\nimport clsx from 'clsx';\nimport { fade, withStyles } from '@material-ui/core/styles';\nimport ButtonBase from '@material-ui/core/ButtonBase';\nimport { setRef, withForwardedRef } from '@material-ui/core/utils';\nimport { clamp } from '@material-ui/lab/utils';\nexport var styles = function styles(theme) {\n  var commonTransitionsOptions = {\n    duration: theme.transitions.duration.shortest,\n    easing: theme.transitions.easing.easeOut\n  };\n  var trackTransitions = theme.transitions.create(['width', 'height', 'transform'], commonTransitionsOptions);\n  var thumbTransitions = theme.transitions.create(['transform', 'box-shadow'], commonTransitionsOptions);\n  var colors = {\n    primary: theme.palette.primary.main,\n    disabled: theme.palette.grey[400],\n    thumbOutline: fade(theme.palette.primary.main, 0.16)\n  };\n  /**\n   * radius of the box-shadow when pressed\n   * hover should have a diameter equal to the pressed radius\n   */\n\n  var pressedOutlineRadius = 9;\n  /**\n   * We need to give some overflow so that the button and tap\n   * highlight can be shown with overlay hidden.\n   */\n\n  var overflowSize = 24;\n  return {\n    /* Styles applied to the root element. */\n    root: {\n      position: 'relative',\n      width: '100%',\n      cursor: 'pointer',\n      WebkitTapHighlightColor: 'transparent',\n      '&$disabled': {\n        cursor: 'no-drop'\n      },\n      '&$vertical': {\n        height: '100%'\n      }\n    },\n\n    /* Styles applied to the container element. */\n    container: {\n      width: \"calc(100% + \".concat(overflowSize * 2, \"px)\"),\n      overflow: 'hidden',\n      padding: overflowSize,\n      margin: -overflowSize,\n      boxSizing: 'border-box',\n      '&$vertical': {\n        height: \"calc(100% + \".concat(overflowSize * 2, \"px)\")\n      }\n    },\n\n    /* Styles applied to the track elements. */\n    track: {\n      position: 'absolute',\n      transform: 'translate(0, -50%)',\n      top: '50%',\n      width: '100%',\n      height: 2,\n      backgroundColor: colors.primary,\n      transition: trackTransitions,\n      '&$activated': {\n        transition: 'none'\n      },\n      '&$disabled': {\n        backgroundColor: colors.disabled,\n        boxShadow: 'none'\n      },\n      '&$vertical': {\n        transform: 'translate(-50%, 0)',\n        left: '50%',\n        top: 'initial',\n        bottom: 0,\n        width: 2,\n        height: '100%'\n      }\n    },\n\n    /* Styles applied to the track element before the thumb. */\n    trackBefore: {\n      zIndex: 1,\n      left: 0,\n      transformOrigin: 'left bottom'\n    },\n\n    /* Styles applied to the track element after the thumb. */\n    trackAfter: {\n      right: 0,\n      opacity: 0.24,\n      transformOrigin: 'right top',\n      '&$vertical': {\n        top: 0\n      }\n    },\n\n    /* Styles applied to the thumb wrapper element. */\n    thumbWrapper: {\n      position: 'relative',\n      zIndex: 2,\n      transition: thumbTransitions,\n      '&$activated': {\n        transition: 'none'\n      },\n      '&$vertical': {\n        bottom: 0,\n        height: '100%'\n      }\n    },\n\n    /* Styles applied to the thumb element. */\n    thumb: {\n      // Opt out of rtl flip as positioning here only is for centering\n      flip: false,\n      position: 'absolute',\n      left: 0,\n      transform: 'translate(-50%, -50%)',\n      width: 12,\n      height: 12,\n      borderRadius: '50%',\n      backgroundColor: colors.primary,\n      transition: thumbTransitions,\n      '&$focused, &:hover': {\n        boxShadow: \"0px 0px 0px \".concat(pressedOutlineRadius, \"px \").concat(colors.thumbOutline)\n      },\n      '&$activated': {\n        boxShadow: \"0px 0px 0px \".concat(pressedOutlineRadius * 2, \"px \").concat(colors.thumbOutline)\n      },\n      '&$disabled': {\n        cursor: 'no-drop',\n        width: 9,\n        height: 9,\n        backgroundColor: colors.disabled\n      },\n      '&$jumped': {\n        boxShadow: \"0px 0px 0px \".concat(pressedOutlineRadius * 2, \"px \").concat(colors.thumbOutline)\n      }\n    },\n\n    /* Class applied to the thumb element if custom thumb icon provided. */\n    thumbIconWrapper: {\n      backgroundColor: 'transparent'\n    },\n    thumbIcon: {\n      height: 'inherit',\n      width: 'inherit'\n    },\n\n    /* Class applied to the track and thumb elements to trigger JSS nested styles if `disabled`. */\n    disabled: {},\n\n    /* Class applied to the track and thumb elements to trigger JSS nested styles if `jumped`. */\n    jumped: {},\n\n    /* Class applied to the track and thumb elements to trigger JSS nested styles if `focused`. */\n    focused: {},\n\n    /* Class applied to the track and thumb elements to trigger JSS nested styles if `activated`. */\n    activated: {},\n\n    /* Class applied to the root, track and container to trigger JSS nested styles if `vertical`. */\n    vertical: {}\n  };\n};\n\nfunction percentToValue(percent, min, max) {\n  return (max - min) * percent / 100 + min;\n}\n\nfunction roundToStep(number, step) {\n  return Math.round(number / step) * step;\n}\n\nfunction getOffset(node) {\n  var _global = global,\n      pageYOffset = _global.pageYOffset,\n      pageXOffset = _global.pageXOffset;\n\n  var _node$getBoundingClie = node.getBoundingClientRect(),\n      left = _node$getBoundingClie.left,\n      bottom = _node$getBoundingClie.bottom;\n\n  return {\n    bottom: bottom + pageYOffset,\n    left: left + pageXOffset\n  };\n}\n\nfunction getMousePosition(event, touchId) {\n  if (event.changedTouches) {\n    // event.changedTouches.findIndex(touch => touch.identifier === touchId)\n    var touchIndex = 0;\n\n    for (var i = 0; i < event.changedTouches.length; i += 1) {\n      var touch = event.changedTouches[i];\n\n      if (touch.identifier === touchId) {\n        touchIndex = i;\n        break;\n      }\n    }\n\n    if (event.changedTouches[touchIndex]) {\n      return {\n        x: event.changedTouches[touchIndex].pageX,\n        y: event.changedTouches[touchIndex].pageY\n      };\n    }\n  }\n\n  return {\n    x: event.pageX,\n    y: event.pageY\n  };\n}\n\nfunction calculatePercent(node, event, isVertical, isRtl, touchId) {\n  var _node$getBoundingClie2 = node.getBoundingClientRect(),\n      width = _node$getBoundingClie2.width,\n      height = _node$getBoundingClie2.height;\n\n  var _getOffset = getOffset(node),\n      bottom = _getOffset.bottom,\n      left = _getOffset.left;\n\n  var _getMousePosition = getMousePosition(event, touchId),\n      x = _getMousePosition.x,\n      y = _getMousePosition.y;\n\n  var value = isVertical ? bottom - y : x - left;\n  var onePercent = (isVertical ? height : width) / 100;\n  return isRtl && !isVertical ? 100 - clamp(value / onePercent) : clamp(value / onePercent);\n}\n\nfunction preventPageScrolling(event) {\n  event.preventDefault();\n}\n/**\n * @param {number} rawValue\n * @param {object} props\n */\n\n\nexport function defaultValueReducer(rawValue, props) {\n  var disabled = props.disabled,\n      step = props.step;\n\n  if (disabled) {\n    return null;\n  }\n\n  if (step) {\n    return roundToStep(rawValue, step);\n  }\n\n  return Number(rawValue.toFixed(3));\n}\n\nvar Slider =\n/*#__PURE__*/\nfunction (_React$Component) {\n  _inherits(Slider, _React$Component);\n\n  function Slider() {\n    var _getPrototypeOf2;\n\n    var _this;\n\n    _classCallCheck(this, Slider);\n\n    for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {\n      args[_key] = arguments[_key];\n    }\n\n    _this = _possibleConstructorReturn(this, (_getPrototypeOf2 = _getPrototypeOf(Slider)).call.apply(_getPrototypeOf2, [this].concat(args)));\n    _this.state = {\n      currentState: 'initial'\n    };\n    _this.jumpAnimationTimeoutId = -1;\n    _this.touchId = undefined;\n\n    _this.handleKeyDown = function (event) {\n      var _this$props = _this.props,\n          min = _this$props.min,\n          max = _this$props.max,\n          currentValue = _this$props.value;\n      var onePercent = Math.abs((max - min) / 100);\n      var step = _this.props.step || onePercent;\n      var value;\n\n      switch (event.key) {\n        case 'Home':\n          value = min;\n          break;\n\n        case 'End':\n          value = max;\n          break;\n\n        case 'PageUp':\n          value = currentValue + onePercent * 10;\n          break;\n\n        case 'PageDown':\n          value = currentValue - onePercent * 10;\n          break;\n\n        case 'ArrowRight':\n        case 'ArrowUp':\n          value = currentValue + step;\n          break;\n\n        case 'ArrowLeft':\n        case 'ArrowDown':\n          value = currentValue - step;\n          break;\n\n        default:\n          return;\n      }\n\n      event.preventDefault();\n      value = clamp(value, min, max);\n\n      _this.emitChange(event, value);\n    };\n\n    _this.handleFocus = function () {\n      _this.setState({\n        currentState: 'focused'\n      });\n    };\n\n    _this.handleBlur = function () {\n      _this.setState({\n        currentState: 'normal'\n      });\n    };\n\n    _this.handleClick = function (event) {\n      var value = _this.calculateValueFromPercent(event);\n\n      _this.emitChange(event, value, function () {\n        _this.playJumpAnimation();\n      });\n    };\n\n    _this.handleMouseEnter = function (event) {\n      // If the slider was being interacted with but the mouse went off the window\n      // and then re-entered while unclicked then end the interaction.\n      if (event.buttons === 0) {\n        _this.handleDragEnd(event);\n      }\n    };\n\n    _this.handleMouseLeave = function (event) {\n      // The mouse will have moved between the last mouse move event\n      // this mouse leave event\n      _this.handleMouseMove(event);\n    };\n\n    _this.handleTouchStart = function (event) {\n      event.preventDefault();\n      var touch = event.changedTouches.item(0);\n\n      if (touch != null) {\n        _this.touchId = touch.identifier;\n      }\n\n      _this.setState({\n        currentState: 'activated'\n      });\n\n      var _this$props2 = _this.props,\n          onDragStart = _this$props2.onDragStart,\n          valueReducer = _this$props2.valueReducer;\n\n      var value = _this.calculateValueFromPercent(event);\n\n      var newValue = valueReducer(value, _this.props, event);\n\n      _this.emitChange(event, value);\n\n      document.body.addEventListener('touchend', _this.handleTouchEnd);\n\n      if (typeof onDragStart === 'function') {\n        onDragStart(event, newValue);\n      }\n    };\n\n    _this.handleMouseDown = function (event) {\n      _this.setState({\n        currentState: 'activated'\n      });\n\n      var _this$props3 = _this.props,\n          onDragStart = _this$props3.onDragStart,\n          valueReducer = _this$props3.valueReducer;\n\n      var value = _this.calculateValueFromPercent(event);\n\n      var newValue = valueReducer(value, _this.props, event);\n      document.body.addEventListener('mouseenter', _this.handleMouseEnter);\n      document.body.addEventListener('mouseleave', _this.handleMouseLeave);\n      document.body.addEventListener('mousemove', _this.handleMouseMove);\n      document.body.addEventListener('mouseup', _this.handleMouseUp);\n\n      if (typeof onDragStart === 'function') {\n        onDragStart(event, newValue);\n      }\n    };\n\n    _this.handleTouchEnd = function (event) {\n      if (_this.touchId === undefined) {\n        _this.handleMouseUp(event);\n      }\n\n      for (var i = 0; i < event.changedTouches.length; i += 1) {\n        var touch = event.changedTouches.item(i);\n\n        if (touch.identifier === _this.touchId) {\n          _this.handleMouseUp(event);\n\n          break;\n        }\n      }\n    };\n\n    _this.handleMouseUp = function (event) {\n      _this.handleDragEnd(event);\n    };\n\n    _this.handleTouchMove = function (event) {\n      if (_this.touchId === undefined) {\n        _this.handleMouseMove(event);\n      }\n\n      for (var i = 0; i < event.changedTouches.length; i += 1) {\n        var touch = event.changedTouches.item(i);\n\n        if (touch.identifier === _this.touchId) {\n          _this.handleMouseMove(event);\n\n          break;\n        }\n      }\n    };\n\n    _this.handleMouseMove = function (event) {\n      var value = _this.calculateValueFromPercent(event);\n\n      _this.emitChange(event, value);\n    };\n\n    _this.handleRef = function (ref) {\n      setRef(_this.props.innerRef, ref); // #StrictMode ready\n\n      var nextContainer = ReactDOM.findDOMNode(ref);\n      var prevContainer = _this.container;\n\n      if (prevContainer !== nextContainer) {\n        if (prevContainer) {\n          prevContainer.removeEventListener('touchstart', preventPageScrolling, {\n            passive: false\n          });\n        }\n\n        if (nextContainer) {\n          nextContainer.addEventListener('touchstart', preventPageScrolling, {\n            passive: false\n          });\n        }\n      }\n\n      _this.container = nextContainer;\n    };\n\n    return _this;\n  }\n\n  _createClass(Slider, [{\n    key: \"componentWillUnmount\",\n    value: function componentWillUnmount() {\n      document.body.removeEventListener('mouseenter', this.handleMouseEnter);\n      document.body.removeEventListener('mouseleave', this.handleMouseLeave);\n      document.body.removeEventListener('mousemove', this.handleMouseMove);\n      document.body.removeEventListener('mouseup', this.handleMouseUp);\n      clearTimeout(this.jumpAnimationTimeoutId);\n    }\n  }, {\n    key: \"handleDragEnd\",\n    value: function handleDragEnd(event) {\n      var _this$props4 = this.props,\n          onDragEnd = _this$props4.onDragEnd,\n          valueReducer = _this$props4.valueReducer;\n      var value = this.calculateValueFromPercent(event);\n      var newValue = valueReducer(value, this.props, event);\n      this.setState({\n        currentState: 'normal'\n      });\n      document.body.removeEventListener('mouseenter', this.handleMouseEnter);\n      document.body.removeEventListener('mouseleave', this.handleMouseLeave);\n      document.body.removeEventListener('mousemove', this.handleMouseMove);\n      document.body.removeEventListener('mouseup', this.handleMouseUp);\n      document.body.removeEventListener('touchend', this.handleTouchEnd);\n\n      if (typeof onDragEnd === 'function') {\n        onDragEnd(event, newValue);\n      }\n    }\n  }, {\n    key: \"emitChange\",\n    value: function emitChange(event, rawValue, callback) {\n      var _this$props5 = this.props,\n          onChange = _this$props5.onChange,\n          previousValue = _this$props5.value,\n          valueReducer = _this$props5.valueReducer;\n      var newValue = valueReducer(rawValue, this.props, event);\n\n      if (newValue !== null && newValue !== previousValue && typeof onChange === 'function') {\n        onChange(event, newValue);\n\n        if (typeof callback === 'function') {\n          callback();\n        }\n      }\n    }\n  }, {\n    key: \"calculateTrackPartStyles\",\n    value: function calculateTrackPartStyles(percent) {\n      var _this$props6 = this.props,\n          theme = _this$props6.theme,\n          vertical = _this$props6.vertical;\n      var currentState = this.state.currentState;\n\n      switch (currentState) {\n        case 'disabled':\n          return _defineProperty({}, vertical ? 'height' : 'width', \"calc(\".concat(percent, \"% - 6px)\"));\n\n        default:\n          return {\n            transform: \"\".concat(vertical ? \"translateX(\".concat(theme.direction === 'rtl' ? '' : '-', \"50%) scaleY\") : 'translateY(-50%) scaleX', \"(\").concat(percent / 100, \")\")\n          };\n      }\n    }\n  }, {\n    key: \"calculateValueFromPercent\",\n    value: function calculateValueFromPercent(event) {\n      var _this$props7 = this.props,\n          min = _this$props7.min,\n          max = _this$props7.max,\n          vertical = _this$props7.vertical;\n      var percent = calculatePercent(this.container, event, vertical, this.isReverted(), this.touchId);\n      return percentToValue(percent, min, max);\n    }\n  }, {\n    key: \"playJumpAnimation\",\n    value: function playJumpAnimation() {\n      var _this2 = this;\n\n      this.setState({\n        currentState: 'jumped'\n      }, function () {\n        clearTimeout(_this2.jumpAnimationTimeoutId);\n        _this2.jumpAnimationTimeoutId = setTimeout(function () {\n          _this2.setState({\n            currentState: 'normal'\n          });\n        }, _this2.props.theme.transitions.duration.complex);\n      });\n    }\n  }, {\n    key: \"isReverted\",\n    value: function isReverted() {\n      return this.props.theme.direction === 'rtl';\n    }\n  }, {\n    key: \"render\",\n    value: function render() {\n      var currentState = this.state.currentState;\n\n      var _this$props8 = this.props,\n          classNameProp = _this$props8.className,\n          classes = _this$props8.classes,\n          Component = _this$props8.component,\n          thumbIcon = _this$props8.thumb,\n          disabled = _this$props8.disabled,\n          innerRef = _this$props8.innerRef,\n          max = _this$props8.max,\n          min = _this$props8.min,\n          onChange = _this$props8.onChange,\n          onDragEnd = _this$props8.onDragEnd,\n          onDragStart = _this$props8.onDragStart,\n          step = _this$props8.step,\n          theme = _this$props8.theme,\n          value = _this$props8.value,\n          valueReducer = _this$props8.valueReducer,\n          vertical = _this$props8.vertical,\n          other = _objectWithoutProperties(_this$props8, [\"className\", \"classes\", \"component\", \"thumb\", \"disabled\", \"innerRef\", \"max\", \"min\", \"onChange\", \"onDragEnd\", \"onDragStart\", \"step\", \"theme\", \"value\", \"valueReducer\", \"vertical\"]);\n\n      var percent = clamp((value - min) * 100 / (max - min));\n      var commonClasses = clsx(!disabled && [currentState === 'jumped' && classes.jumped, currentState === 'focused' && classes.focused, currentState === 'activated' && classes.activated], disabled && classes.disabled, vertical && classes.vertical, theme.direction === 'rtl' && classes.rtl);\n      var className = clsx(classes.root, vertical && classes.vertical, disabled && classes.disabled, classNameProp);\n      var containerClasses = clsx(classes.container, vertical && classes.vertical);\n      var trackBeforeClasses = clsx(classes.track, classes.trackBefore, commonClasses);\n      var trackAfterClasses = clsx(classes.track, classes.trackAfter, commonClasses);\n      var thumbTransformFunction = vertical ? 'translateY' : 'translateX';\n      var thumbDirectionInverted = vertical || theme.direction === 'rtl';\n      var inlineTrackBeforeStyles = this.calculateTrackPartStyles(percent);\n      var inlineTrackAfterStyles = this.calculateTrackPartStyles(100 - percent);\n      var inlineThumbStyles = {\n        transform: \"\".concat(thumbTransformFunction, \"(\").concat(thumbDirectionInverted ? 100 - percent : percent, \"%)\")\n      };\n      /** Start Thumb Icon Logic Here */\n\n      var ThumbIcon = thumbIcon ? React.cloneElement(thumbIcon, _extends({}, thumbIcon.props, {\n        className: clsx(thumbIcon.props.className, classes.thumbIcon)\n      })) : null;\n      /** End Thumb Icon Logic Here */\n\n      var thumbWrapperClasses = clsx(classes.thumbWrapper, commonClasses);\n      var thumbClasses = clsx(classes.thumb, thumbIcon && classes.thumbIconWrapper, commonClasses);\n      return React.createElement(Component, _extends({\n        className: className,\n        onClick: this.handleClick,\n        onMouseDown: this.handleMouseDown,\n        onTouchStartCapture: this.handleTouchStart,\n        onTouchMove: this.handleTouchMove,\n        ref: this.handleRef\n      }, other), React.createElement(\"div\", {\n        className: containerClasses\n      }, React.createElement(\"div\", {\n        className: trackBeforeClasses,\n        style: inlineTrackBeforeStyles\n      }), React.createElement(\"div\", {\n        className: thumbWrapperClasses,\n        style: inlineThumbStyles\n      }, React.createElement(ButtonBase, {\n        \"aria-valuenow\": value,\n        \"aria-valuemin\": min,\n        \"aria-valuemax\": max,\n        \"aria-orientation\": vertical ? 'vertical' : 'horizontal',\n        className: thumbClasses,\n        disabled: disabled,\n        disableRipple: true,\n        onBlur: this.handleBlur,\n        onKeyDown: this.handleKeyDown,\n        onTouchStartCapture: this.handleTouchStart,\n        onTouchMove: this.handleTouchMove,\n        onFocusVisible: this.handleFocus,\n        role: \"slider\"\n      }, ThumbIcon)), React.createElement(\"div\", {\n        className: trackAfterClasses,\n        style: inlineTrackAfterStyles\n      })));\n    }\n  }], [{\n    key: \"getDerivedStateFromProps\",\n    value: function getDerivedStateFromProps(nextProps, prevState) {\n      if (nextProps.disabled) {\n        return {\n          currentState: 'disabled'\n        };\n      }\n\n      if (!nextProps.disabled && prevState.currentState === 'disabled') {\n        return {\n          currentState: 'normal'\n        };\n      }\n\n      return null;\n    }\n  }]);\n\n  return Slider;\n}(React.Component);\n\nprocess.env.NODE_ENV !== \"production\" ? Slider.propTypes = {\n  /**\n   * Override or extend the styles applied to the component.\n   * See [CSS API](#css) below for more details.\n   */\n  classes: PropTypes.object.isRequired,\n\n  /**\n   * @ignore\n   */\n  className: PropTypes.string,\n\n  /**\n   * The component used for the root node.\n   * Either a string to use a DOM element or a component.\n   */\n  component: PropTypes.elementType,\n\n  /**\n   * If `true`, the slider will be disabled.\n   */\n  disabled: PropTypes.bool,\n\n  /**\n   * @ignore\n   * from `withForwardRef`\n   */\n  innerRef: PropTypes.oneOfType([PropTypes.func, PropTypes.object]),\n\n  /**\n   * The maximum allowed value of the slider.\n   * Should not be equal to min.\n   */\n  max: PropTypes.number,\n\n  /**\n   * The minimum allowed value of the slider.\n   * Should not be equal to max.\n   */\n  min: PropTypes.number,\n\n  /**\n   * Callback function that is fired when the slider's value changed.\n   */\n  onChange: PropTypes.func,\n\n  /**\n   * Callback function that is fired when the slide has stopped moving.\n   */\n  onDragEnd: PropTypes.func,\n\n  /**\n   * Callback function that is fired when the slider has begun to move.\n   */\n  onDragStart: PropTypes.func,\n\n  /**\n   * The granularity the slider can step through values.\n   */\n  step: PropTypes.number,\n\n  /**\n   * @ignore\n   */\n  theme: PropTypes.object.isRequired,\n\n  /**\n   * The component used for the slider icon.\n   * This is optional, if provided should be a react element.\n   */\n  thumb: PropTypes.element,\n\n  /**\n   * The value of the slider.\n   */\n  value: PropTypes.number.isRequired,\n\n  /**\n   * the reducer used to process the value emitted from the slider. If `null` or\n   * the same value is returned no change is emitted.\n   * @param {number} rawValue - value in [min, max]\n   * @param {SliderProps} props - current props of the Slider\n   * @param {Event} event - the event the change was triggered from\n   */\n  valueReducer: PropTypes.func,\n\n  /**\n   * If `true`, the slider will be vertical.\n   */\n  vertical: PropTypes.bool\n} : void 0;\nSlider.defaultProps = {\n  min: 0,\n  max: 100,\n  component: 'div',\n  valueReducer: defaultValueReducer\n};\nexport default withStyles(styles, {\n  name: 'MuiSlider',\n  withTheme: true\n})(withForwardedRef(Slider));","map":null,"metadata":{},"sourceType":"module"}